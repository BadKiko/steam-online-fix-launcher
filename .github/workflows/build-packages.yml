name: Build and Release Packages

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      version:
        description: "Version to build (leave empty for auto from meson.build)"
        required: false
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  get-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get version
        id: get-version
        run: |
          if [ -n "${{ github.event.inputs.version }}" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            VERSION=$(grep -o "version: '[^']*'" meson.build | sed "s/version: '\([^']*\)'/\1/")
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          fi

  build-flatpak:
    needs: get-version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install flatpak dependencies
        run: |
          sudo apt update
          sudo apt install -y flatpak flatpak-builder python3-gi python3-gi-cairo git python3-pip

      - name: Setup flatpak
        run: |
          flatpak --version
          flatpak remote-add --user --if-not-exists flathub https://dl.flathub.org/repo/flathub.flatpakrepo
          flatpak update --appstream --user || true

      - name: Install flatpak runtimes
        run: |
          flatpak install --user --noninteractive flathub org.gnome.Platform//48
          flatpak install --user --noninteractive flathub org.gnome.Sdk//48

      - name: Install blueprint-compiler
        run: |
          pip3 install blueprint-compiler || echo "blueprint-compiler installed via pip"

      - name: Update version
        run: |
          ./scripts/update_version.sh ${{ needs.get-version.outputs.version }}

      - name: Build Flatpak
        run: |
          mkdir -p dist
          cd packaging/flatpak
          ./build.sh ${{ needs.get-version.outputs.version }} ../../dist

      - name: Upload Flatpak artifact
        uses: actions/upload-artifact@v4
        with:
          name: sofl-flatpak-${{ needs.get-version.outputs.version }}
          path: dist/org.badkiko.sofl.flatpak

  build-deb:
    needs: get-version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y meson ninja-build python3-gi python3-gi-cairo gir1.2-gtk-4.0 gir1.2-adw-1 python3-requests python3-pillow python3-cairo python3-psutil python3-xdg dpkg-dev libgtk-4-dev libadwaita-1-dev

      - name: Update version
        run: |
          ./scripts/update_version.sh ${{ needs.get-version.outputs.version }}

      - name: Build Debian package
        run: |
          mkdir -p dist
          cd packaging/debian
          ./build.sh ${{ needs.get-version.outputs.version }} ../../dist

      - name: Upload Debian artifact
        uses: actions/upload-artifact@v4
        with:
          name: sofl-deb-${{ needs.get-version.outputs.version }}
          path: dist/sofl_${{ needs.get-version.outputs.version }}_all.deb

  build-arch:
    needs: get-version
    runs-on: ubuntu-latest
    container:
      image: archlinux:latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Update system and install dependencies
        run: |
          pacman -Sy --noconfirm
          pacman -S --noconfirm --needed base-devel git meson ninja python python-gobject gtk4 libadwaita python-requests python-pillow python-cairo python-psutil python-pyxdg gobject-introspection

      - name: Update version
        run: |
          ./scripts/update_version.sh ${{ needs.get-version.outputs.version }}

      - name: Fix git safe directory
        run: |
          git config --global --add safe.directory ${{ github.workspace }}

      - name: Build Arch Linux package
        run: |
          mkdir -p dist
          cd packaging/arch
          ./build.sh ${{ needs.get-version.outputs.version }} ../../dist

      - name: Upload Arch package artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sofl-arch-${{ needs.get-version.outputs.version }}
          path: |
            dist/*.pkg.tar.zst
            dist/*.tar.gz

  release:
    needs: [get-version, build-flatpak, build-deb, build-arch]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.get-version.outputs.version }}
          name: SOFL v${{ needs.get-version.outputs.version }}
          body: |
            ## Changes

            ### New Features
            - Automatic package building for multiple Linux distributions

            ### Package Downloads
            - **Flatpak**: `org.badkiko.sofl.flatpak`
            - **Debian/Ubuntu**: `sofl_${{ needs.get-version.outputs.version }}_all.deb`
            - **Arch Linux**: Source package available for building with `makepkg`

            ### Installation Instructions

            **Flatpak:**
            ```bash
            flatpak install --user org.badkiko.sofl.flatpak
            ```

            **Debian/Ubuntu:**
            ```bash
            sudo dpkg -i sofl_${{ needs.get-version.outputs.version }}_all.deb
            sudo apt install -f
            ```

            **Arch Linux:**
            ```bash
            # Download source tarball and PKGBUILD, then run:
            makepkg -si
            ```
          files: |
            sofl-flatpak-${{ needs.get-version.outputs.version }}/org.badkiko.sofl.flatpak
            sofl-deb-${{ needs.get-version.outputs.version }}/sofl_${{ needs.get-version.outputs.version }}_all.deb
            sofl-arch-${{ needs.get-version.outputs.version }}/sofl-${{ needs.get-version.outputs.version }}.tar.gz
            packaging/arch/PKGBUILD
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
