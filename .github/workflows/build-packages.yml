name: Build and Release Packages

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      version:
        description: "Version to build (leave empty for auto from meson.build)"
        required: false
        type: string
      release_body:
        description: "Release body (leave empty to use CHANGELOG.md or generate from git commits)"
        required: false
        type: textarea
      release_body_source:
        description: "Release body source (auto, changelog, git_commits)"
        required: false
        default: "auto"
        type: choice
        options:
          - auto
          - changelog
          - git_commits

permissions:
  contents: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  get-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get version
        id: get-version
        run: |
          if [ -n "${{ github.event.inputs.version }}" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            VERSION=$(grep -o "version: '[^']*'" meson.build | sed "s/version: '\([^']*\)'/\1/")
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          fi

  generate-release-body:
    needs: get-version
    runs-on: ubuntu-latest
    outputs:
      release_body: ${{ steps.generate-body.outputs.release_body }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate Release Body
        id: generate-body
        run: |
          # If release body is provided manually, use it
          if [ -n "${{ github.event.inputs.release_body }}" ]; then
            echo "release_body<<EOF" >> $GITHUB_OUTPUT
            echo "${{ github.event.inputs.release_body }}" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Determine source
          SOURCE="${{ github.event.inputs.release_body_source }}"
          if [ "$SOURCE" = "auto" ]; then
            if [ -f "CHANGELOG.md" ]; then
              SOURCE="changelog"
            else
              SOURCE="git_commits"
            fi
          fi

          echo "release_body<<EOF" >> $GITHUB_OUTPUT

          case "$SOURCE" in
            "changelog")
              if [ -f "CHANGELOG.md" ]; then
                echo "## Changes" >> $GITHUB_OUTPUT
                echo "" >> $GITHUB_OUTPUT
                # Extract latest version section from CHANGELOG.md
                awk '
                  /^## \[v.*\]/ { if (++count > 1) exit; next }
                  count == 1 && /^###/ { in_section = 1 }
                  count == 1 && in_section && /^---/ { exit }
                  count == 1 && in_section { print }
                ' CHANGELOG.md >> $GITHUB_OUTPUT
              else
                echo "CHANGELOG.md not found, falling back to git commits" >> $GITHUB_OUTPUT
                SOURCE="git_commits"
              fi
              ;;
          esac

          if [ "$SOURCE" = "git_commits" ]; then
            echo "## Changes" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT

            # Get previous tag
            PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")

            if [ -n "$PREVIOUS_TAG" ]; then
              echo "### New Features" >> $GITHUB_OUTPUT
              git log --pretty=format:"%s" --grep="^feat:" --grep="^add:" --grep="^new:" $PREVIOUS_TAG..HEAD | sed 's/^/- /' >> $GITHUB_OUTPUT
              echo "" >> $GITHUB_OUTPUT

              echo "### Bug Fixes" >> $GITHUB_OUTPUT
              git log --pretty=format:"%s" --grep="^fix:" --grep="^bug:" $PREVIOUS_TAG..HEAD | sed 's/^/- /' >> $GITHUB_OUTPUT
              echo "" >> $GITHUB_OUTPUT

              echo "### Other Changes" >> $GITHUB_OUTPUT
              git log --pretty=format:"%s" $PREVIOUS_TAG..HEAD | grep -v -E "^(feat|add|new|fix|bug):" | sed 's/^/- /' >> $GITHUB_OUTPUT
              echo "" >> $GITHUB_OUTPUT
            else
              echo "### Recent Changes" >> $GITHUB_OUTPUT
              git log --oneline --since="1 week ago" --pretty=format:"%s" | sed 's/^/- /' >> $GITHUB_OUTPUT
              echo "" >> $GITHUB_OUTPUT
            fi
          fi

          # Add package information
          echo "### Package Downloads" >> $GITHUB_OUTPUT
          echo "- **Flatpak**: \`org.badkiko.sofl.flatpak\`" >> $GITHUB_OUTPUT
          echo "- **Debian/Ubuntu**: \`sofl_${{ needs.get-version.outputs.version }}_all.deb\`" >> $GITHUB_OUTPUT
          echo "- **Arch Linux**: Source package available for building with \`makepkg\`" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT

          echo "### Installation Instructions" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "**Flatpak:**" >> $GITHUB_OUTPUT
          echo "\`\`\`bash" >> $GITHUB_OUTPUT
          echo "flatpak install --user org.badkiko.sofl.flatpak" >> $GITHUB_OUTPUT
          echo "\`\`\`" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "**Debian/Ubuntu:**" >> $GITHUB_OUTPUT
          echo "\`\`\`bash" >> $GITHUB_OUTPUT
          echo "sudo dpkg -i sofl_${{ needs.get-version.outputs.version }}_all.deb" >> $GITHUB_OUTPUT
          echo "sudo apt install -f" >> $GITHUB_OUTPUT
          echo "\`\`\`" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "**Arch Linux:**" >> $GITHUB_OUTPUT
          echo "\`\`\`bash" >> $GITHUB_OUTPUT
          echo "# Download source tarball and PKGBUILD, then run:" >> $GITHUB_OUTPUT
          echo "makepkg -si" >> $GITHUB_OUTPUT
          echo "\`\`\`" >> $GITHUB_OUTPUT

          echo "EOF" >> $GITHUB_OUTPUT

  build-flatpak:
    needs: [get-version, generate-release-body]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install flatpak dependencies
        run: |
          sudo apt update
          sudo apt install -y flatpak flatpak-builder python3-gi python3-gi-cairo git python3-pip gettext

      - name: Setup flatpak
        run: |
          flatpak --version
          flatpak remote-add --user --if-not-exists flathub https://dl.flathub.org/repo/flathub.flatpakrepo
          flatpak update --appstream --user || true

      - name: Install flatpak runtimes
        run: |
          flatpak install --user --noninteractive flathub org.gnome.Platform//48
          flatpak install --user --noninteractive flathub org.gnome.Sdk//48

      - name: Update version
        run: |
          ./scripts/update_version.sh ${{ needs.get-version.outputs.version }}

      - name: Build Flatpak
        env:
          FLATPAK_BRANCH: stable
        run: |
          mkdir -p dist
          cd packaging/flatpak
          ./build.sh ${{ needs.get-version.outputs.version }} ../../dist

      - name: Upload Flatpak artifact
        uses: actions/upload-artifact@v4
        with:
          name: sofl-flatpak-${{ needs.get-version.outputs.version }}
          path: dist/org.badkiko.sofl.flatpak

  build-deb:
    needs: [get-version, generate-release-body]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y meson ninja-build python3-gi python3-gi-cairo gir1.2-gtk-4.0 gir1.2-adw-1 python3-requests python3-pillow python3-cairo python3-psutil python3-xdg dpkg-dev libgtk-4-dev libadwaita-1-dev blueprint-compiler gettext desktop-file-utils

      - name: Update version
        run: |
          ./scripts/update_version.sh ${{ needs.get-version.outputs.version }}

      - name: Build Debian package
        run: |
          mkdir -p "$GITHUB_WORKSPACE/dist"
          ./packaging/debian/build.sh ${{ needs.get-version.outputs.version }} "$GITHUB_WORKSPACE/dist"

      - name: Upload Debian artifact
        uses: actions/upload-artifact@v4
        with:
          name: sofl-deb-${{ needs.get-version.outputs.version }}
          path: ${{ github.workspace }}/dist/sofl_${{ needs.get-version.outputs.version }}_all.deb

  build-arch:
    needs: [get-version, generate-release-body]
    runs-on: ubuntu-latest
    container:
      image: archlinux:latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create builder user for makepkg
        run: |
          # Create builder user since makepkg doesn't like running as root
          if ! id -u builder &>/dev/null; then
              useradd -m -s /bin/bash builder
              # Give builder user access to project directory
              mkdir -p ${{ github.workspace }}
              chown -R builder:builder ${{ github.workspace }} || echo "Warning: Could not change ownership, continuing anyway..."
          fi
          echo "Builder user created and configured"

      - name: Update system and install dependencies (root)
        run: |
          pacman -Sy --noconfirm
          pacman -S --noconfirm --needed base-devel git meson ninja python python-gobject gtk4 libadwaita python-requests python-pillow python-cairo python-psutil python-pyxdg gobject-introspection blueprint-compiler gettext

      - name: Update version (root)
        run: |
          ./scripts/update_version.sh ${{ needs.get-version.outputs.version }}

      - name: Restore ownership to builder after version update
        run: |
          chown -R builder:builder ${{ github.workspace }} || echo "Warning: Could not change ownership, continuing anyway..."

      - name: Fix git safe directory as builder
        run: |
          runuser -u builder -- bash -c "git config --global --add safe.directory ${{ github.workspace }}"

      - name: Build Arch Linux package as builder
        run: |
          mkdir -p dist
          chown builder:builder dist || echo "Warning: Could not change ownership of dist, continuing anyway..."
          runuser -u builder -- bash -c "cd packaging/arch && ./build.sh ${{ needs.get-version.outputs.version }} dist"

      - name: Upload Arch package artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sofl-arch-${{ needs.get-version.outputs.version }}
          path: |
            dist/*.pkg.tar.zst
            dist/*.tar.gz

  release:
    needs:
      [get-version, generate-release-body, build-flatpak, build-deb, build-arch]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.get-version.outputs.version }}
          name: SOFL v${{ needs.get-version.outputs.version }}
          body: ${{ needs.generate-release-body.outputs.release_body }}
          files: |
            sofl-flatpak-${{ needs.get-version.outputs.version }}/org.badkiko.sofl.flatpak
            sofl-deb-${{ needs.get-version.outputs.version }}/sofl_${{ needs.get-version.outputs.version }}_all.deb
            sofl-arch-${{ needs.get-version.outputs.version }}/*.pkg.tar.zst
            packaging/arch/PKGBUILD
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
